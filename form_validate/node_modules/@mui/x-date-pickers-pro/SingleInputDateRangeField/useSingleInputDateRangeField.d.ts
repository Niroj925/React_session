import { FieldValueManager } from '@mui/x-date-pickers/internals-fields';
import { DateRangeFieldSection, UseSingleInputDateRangeFieldDefaultizedProps, UseSingleInputDateRangeFieldProps } from './SingleInputDateRangeField.interfaces';
import { DateRange } from '../internal/models';
import { DateRangeValidationError } from '../internal/hooks/validation/useDateRangeValidation';
export declare const dateRangeFieldValueManager: FieldValueManager<DateRange<any>, any, DateRangeFieldSection, DateRangeValidationError>;
export declare const useDefaultizedDateRangeFieldProps: <TInputDate, TDate, AdditionalProps extends {}>(props: UseSingleInputDateRangeFieldProps<TInputDate, TDate>) => Omit<UseSingleInputDateRangeFieldProps<TInputDate, TDate>, "disablePast" | "disableFuture" | "maxDate" | "minDate"> & Required<Pick<UseSingleInputDateRangeFieldProps<TInputDate, TDate>, "disablePast" | "disableFuture" | "maxDate" | "minDate">> & AdditionalProps;
export declare const useSingleInputDateRangeField: <TInputDate, TDate, TProps extends UseSingleInputDateRangeFieldProps<TInputDate, TDate>>(inProps: TProps) => import("@mui/x-date-pickers/internals-fields").UseFieldResponse<Omit<Omit<UseSingleInputDateRangeFieldProps<TInputDate, TDate>, "disablePast" | "disableFuture" | "maxDate" | "minDate"> & Required<Pick<UseSingleInputDateRangeFieldProps<TInputDate, TDate>, "disablePast" | "disableFuture" | "maxDate" | "minDate">> & TProps, "onChange" | "defaultValue" | "onError" | "value" | "shouldDisableDate" | "disablePast" | "disableFuture" | "maxDate" | "minDate" | "readOnly" | "format">>;
