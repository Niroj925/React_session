{"ast":null,"code":"import { useMemo, useRef } from 'react';\nimport useUpdate from './useUpdate';\nimport { resolveHookState } from './misc/hookState';\n\nfunction useList(initialList) {\n  if (initialList === void 0) {\n    initialList = [];\n  }\n\n  var list = useRef(resolveHookState(initialList));\n  var update = useUpdate();\n  var actions = useMemo(function () {\n    var a = {\n      set: function (newList) {\n        list.current = resolveHookState(newList, list.current);\n        update();\n      },\n      push: function () {\n        var items = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          items[_i] = arguments[_i];\n        }\n\n        items.length && actions.set(function (curr) {\n          return curr.concat(items);\n        });\n      },\n      updateAt: function (index, item) {\n        actions.set(function (curr) {\n          var arr = curr.slice();\n          arr[index] = item;\n          return arr;\n        });\n      },\n      insertAt: function (index, item) {\n        actions.set(function (curr) {\n          var arr = curr.slice();\n          index > arr.length ? arr[index] = item : arr.splice(index, 0, item);\n          return arr;\n        });\n      },\n      update: function (predicate, newItem) {\n        actions.set(function (curr) {\n          return curr.map(function (item) {\n            return predicate(item, newItem) ? newItem : item;\n          });\n        });\n      },\n      updateFirst: function (predicate, newItem) {\n        var index = list.current.findIndex(function (item) {\n          return predicate(item, newItem);\n        });\n        index >= 0 && actions.updateAt(index, newItem);\n      },\n      upsert: function (predicate, newItem) {\n        var index = list.current.findIndex(function (item) {\n          return predicate(item, newItem);\n        });\n        index >= 0 ? actions.updateAt(index, newItem) : actions.push(newItem);\n      },\n      sort: function (compareFn) {\n        actions.set(function (curr) {\n          return curr.slice().sort(compareFn);\n        });\n      },\n      filter: function (callbackFn, thisArg) {\n        actions.set(function (curr) {\n          return curr.slice().filter(callbackFn, thisArg);\n        });\n      },\n      removeAt: function (index) {\n        actions.set(function (curr) {\n          var arr = curr.slice();\n          arr.splice(index, 1);\n          return arr;\n        });\n      },\n      clear: function () {\n        actions.set([]);\n      },\n      reset: function () {\n        actions.set(resolveHookState(initialList).slice());\n      }\n    };\n    /**\n     * @deprecated Use removeAt method instead\n     */\n\n    a.remove = a.removeAt;\n    return a;\n  }, []);\n  return [list.current, actions];\n}\n\nexport default useList;","map":{"version":3,"names":["useMemo","useRef","useUpdate","resolveHookState","useList","initialList","list","update","actions","a","set","newList","current","push","items","_i","arguments","length","curr","concat","updateAt","index","item","arr","slice","insertAt","splice","predicate","newItem","map","updateFirst","findIndex","upsert","sort","compareFn","filter","callbackFn","thisArg","removeAt","clear","reset","remove"],"sources":["/home/neo-j-thapa/Documents/React/costom_hook/node_modules/react-use/esm/useList.js"],"sourcesContent":["import { useMemo, useRef } from 'react';\nimport useUpdate from './useUpdate';\nimport { resolveHookState } from './misc/hookState';\nfunction useList(initialList) {\n    if (initialList === void 0) { initialList = []; }\n    var list = useRef(resolveHookState(initialList));\n    var update = useUpdate();\n    var actions = useMemo(function () {\n        var a = {\n            set: function (newList) {\n                list.current = resolveHookState(newList, list.current);\n                update();\n            },\n            push: function () {\n                var items = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    items[_i] = arguments[_i];\n                }\n                items.length && actions.set(function (curr) { return curr.concat(items); });\n            },\n            updateAt: function (index, item) {\n                actions.set(function (curr) {\n                    var arr = curr.slice();\n                    arr[index] = item;\n                    return arr;\n                });\n            },\n            insertAt: function (index, item) {\n                actions.set(function (curr) {\n                    var arr = curr.slice();\n                    index > arr.length ? (arr[index] = item) : arr.splice(index, 0, item);\n                    return arr;\n                });\n            },\n            update: function (predicate, newItem) {\n                actions.set(function (curr) { return curr.map(function (item) { return (predicate(item, newItem) ? newItem : item); }); });\n            },\n            updateFirst: function (predicate, newItem) {\n                var index = list.current.findIndex(function (item) { return predicate(item, newItem); });\n                index >= 0 && actions.updateAt(index, newItem);\n            },\n            upsert: function (predicate, newItem) {\n                var index = list.current.findIndex(function (item) { return predicate(item, newItem); });\n                index >= 0 ? actions.updateAt(index, newItem) : actions.push(newItem);\n            },\n            sort: function (compareFn) {\n                actions.set(function (curr) { return curr.slice().sort(compareFn); });\n            },\n            filter: function (callbackFn, thisArg) {\n                actions.set(function (curr) { return curr.slice().filter(callbackFn, thisArg); });\n            },\n            removeAt: function (index) {\n                actions.set(function (curr) {\n                    var arr = curr.slice();\n                    arr.splice(index, 1);\n                    return arr;\n                });\n            },\n            clear: function () {\n                actions.set([]);\n            },\n            reset: function () {\n                actions.set(resolveHookState(initialList).slice());\n            },\n        };\n        /**\n         * @deprecated Use removeAt method instead\n         */\n        a.remove = a.removeAt;\n        return a;\n    }, []);\n    return [list.current, actions];\n}\nexport default useList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}